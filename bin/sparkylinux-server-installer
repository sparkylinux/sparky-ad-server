#!/bin/bash

# sparky-server script lets you install and set up the server edition on the top of sparky
# Copyright Pawe≈Ç Pijanowski "pavroo" <pavroo@onet.eu> & Daniel Campos Ramos 2018/09/23
# Under the GNU GPL3 License
# Last update 2019/01/24 by pavroo
#
# script deps: apt, bash, coreutils, dpkg, dialog, gawk, grep, hostname, nano, iputils-ping, sed, sparky-backup-core, sparky-remsu
#
# iso pre-installed deps: base-files, iputils-ping, linux-headers-amd64|linux-headers-686-pae, linux-image-amd64|linux-image-686-pae, net-tools, openssh-server, postfix, sparky-apt-sb, sparky-backup-server
#
# server iso name with a suffix: server or sbserver
# client iso name with a suffix: client or client-light

# checking to make sure the script is running with root privileges
TESTROOT=`whoami`
if [ "$TESTROOT" != "root" ]; then
	echo "Must be run as root... Exiting..."
	exit 1
fi

# choose language
if [ -f /tmp/sparky-advanced-installer ]; then
	DEFLANG=`cat /tmp/sparky-advanced-installer`
fi

# get default's locale file
DEFLOCDIR="/usr/share/sparky/sparky-backup-server"
if [ "$DEFLANG" = "Brazilian" ]; then
. $DEFLOCDIR/pt_BR
echo "br" >> /TARGET/tmp/ntpconf
elif [ "$DEFLANG" = "French" ]; then
. $DEFLOCDIR/fr
elif [ "$DEFLANG" = "Italian" ]; then
. $DEFLOCDIR/it
elif [ "$DEFLANG" = "Polish" ]; then
. $DEFLOCDIR/pl
else
. $DEFLOCDIR/en
fi

# set options
DIALOG=`which dialog`
HEIGHT="17"
WIDTH="75"
HEIGHT2="8"
WIDTH2="70"
MENUHEIGHT="12"
TITLE="--title "
#TEXT=""
ENTRY="--inputbox "
MENU="--menu"
YESNO="--yesno "
MSGBOX="--msgbox "
PASSWORD="--passwordbox "
DSELECT="--dselect "
BACKTITLE="--backtitle "
TITLETEXT="Sparky Server Installer"
ARCH64=`uname -m | grep x86_64`
ARCH32=`uname -m | grep 686`

if [ "$ARCH32" != "" ]; then
	echo "32bit OS... OK"
elif [ "$ARCH64" != "" ]; then
	echo "64bit OS... OK"
else
	$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL110\n\n$LOCAL3" $HEIGHT $WIDTH
	exit 1
fi

SPARKYVERCHECK5=`cat /etc/issue | grep 5`
SPARKYVERCHECK4=`cat /etc/issue | grep 4`
DEBIANVERCHECK10=`cat /etc/issue | grep buster`
DEBIANVERCHECK9=`cat /etc/issue | grep stretch`
if [ "$SPARKYVERCHECK5" != "" ]; then
	echo "$LOCAL4 $LOCAL3"
	exit 1
elif [ "$DEBIANVERCHECK10" != "" ]; then
	echo "$LOCAL4 $LOCAL3"
	exit 1
fi

### additional desktop log section ###
echo "Server Installer additional log section" >> /var/log/sparkylinux-installer.log
echo "==============================================================" >> /var/log/sparkylinux-installer.log

# checking connection
PINGTEST=$(ping -c 1 debian.org | grep [0-9])

if [ "$PINGTEST" = "" ]; then
	$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL1\n$LOCAL2\n\n$LOCAL3" $HEIGHT $WIDTH
	echo "PING TEST=Internet connection not active, please connect for better results" >> /var/log/sparkylinux-installer.log
	exit 1
else
	echo "PING TEST=Internet connection OK" >> /var/log/sparkylinux-installer.log
fi

### step 1: install pre-requisites ###

if [ "$ARCH64" != "" ]; then

# 64 bit multiarch
cat > /TARGET/tmp/step1 << FOO
#!/bin/bash
FOREIGN=`dpkg --print-foreign-architectures | grep i386`
if [ "$FOREIGN" = "" ]; then
dpkg --add-architecture i386
fi
apt-get update
apt-get install sparky-meta-server -y
apt-get update
update-command-not-found
FOO

SERVPACK="64bit"

else

# 32 bit
cat > /TARGET/tmp/step1 << FOO
#!/bin/bash
apt-get update
apt-get install sparky-meta-server -y
apt-get update
update-command-not-found
FOO

SERVPACK="32bit"

fi

chmod +x /TARGET/tmp/step1
chroot /TARGET /tmp/step1
rm -f /TARGET/tmp/step1

# check is the set of server apps installed
if [ -d /TARGET/usr/share/doc/sparky-meta-server ]; then
	echo "STEP1=$SERVPACK bit pre-requisites packages installed ok" >> /var/log/sparkylinux-installer.log
	echo "$SERVPACK pre-requisites packages installed ok"
else
	echo "STEP1=$SERVPACK bit pre-requisites packages NOT installed" >> /var/log/sparkylinux-installer.log
	echo "$SERVPACK pre-requisites packages NOT installed... Exiting..."
	exit 1
fi

### end of step 1 ###

### step 2: enable UPS support ###

# enable support to UPS via nut
$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL111" $HEIGHT $WIDTH
if [ "$?" = "0" ]; then

cat > /TARGET/tmp/step2 << FOO
#!/bin/bash
apt-get install nut -y
FOO

chmod +x /TARGET/tmp/step2
chroot /TARGET /tmp/step2
rm -f /TARGET/tmp/step2

echo "STEP2=UPS support installed" >> /var/log/sparkylinux-installer.log

else

echo "STEP2=UPS support not installed" >> /var/log/sparkylinux-installer.log

fi

### end of step 2 ###

### step 3: install beep support via sparky-beep ###

$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL118" $HEIGHT $WIDTH
if [ "$?" = "0" ]; then

cat > /TARGET/tmp/step3 << FOO
#!/bin/bash
apt-get install sparky-beep -y
FOO

chmod +x /TARGET/tmp/step3
chroot /TARGET /tmp/step3
rm -f /TARGET/tmp/step3

echo "STEP3=Beep support installed" >> /var/log/sparkylinux-installer.log

else

echo "STEP3=Beep support not installed" >> /var/log/sparkylinux-installer.log

fi

### end of step 3 ###

### step 4: networking ###

# find network devices
NETNAME0=`ifconfig | grep enp | cut -f1 -d":" | head -n1`
echo "STEP4=grep enp devices" >> /var/log/sparkylinux-installer.log
ifconfig | grep enp | cut -f1 -d":" | head -n1 >> /var/log/sparkylinux-installer.log
NETNAME1=`ifconfig | grep eth0 | cut -f1 -d":" | head -n1`
echo "STEP4=grep eth0 device" >> /var/log/sparkylinux-installer.log
ifconfig | grep eth0 | cut -f1 -d":" | head -n1 >> /var/log/sparkylinux-installer.log

if [ "$NETNAME0" != "" ]; then

	INETDEV0=`ifconfig | grep enp | cut -f1 -d":" | head -n1`
	INETDEV1=`ifconfig | grep enp | cut -f1 -d":" | head -n2 | tail -n1`
	if [ "$INETDEV1" != "" ]; then
		INETDEV="$INETDEV0 $INETDEV1"
	else
		INETDEV="$INETDEV0"
	fi

elif [ "$NETNAME1" != "" ]; then

	INETDEV0=`ifconfig | grep eth0 | cut -f1 -d":" | head -n1`
	INETDEV1=`ifconfig | grep eth1 | cut -f1 -d":" | head -n2`
	echo "STEP4=grep eth1 device" >> /var/log/sparkylinux-installer.log
	ifconfig | grep eth1 | cut -f1 -d":" | head -n1 >> /var/log/sparkylinux-installer.log
	if [ "$INETDEV1" = "" ]; then
		INETDEV="$INETDEV0"
	else
		INETDEV="$INETDEV0 $INETDEV1"
	fi

else

	echo "STEP4=No supported ethernet network devices found, have to set it manually or check missing specific drivers" >> /var/log/sparkylinux-installer.log
	YOURIFCONFIG=`ifconfig`
	$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL113 $LOCAL114\n$LOCAL115\n\n$YOURIFCONFIG" $HEIGHT $WIDTH
	if [ "$?" = "0" ]; then
		$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL116" $HEIGHT $WIDTH 2>/tmp/serverchoice.$$
		INETDEV=`cat /tmp/serverchoice.$$`
		NETNAME2=`$INETDEV | cut -f1 -d":"`
		echo "STEP4=manually added network device=$INETDEV" >> /var/log/sparkylinux-installer.log
		rm /tmp/serverchoice.$$
	fi

fi

# find address, netmask, network, broadcast, gateway
NETWORK1=`ifconfig | grep inet | head -n1 | cut -d":" -f2 | awk '{print $2}' | cut -f1 -d"."`
NETWORK2=`ifconfig | grep inet | head -n1 | cut -d":" -f2 | awk '{print $2}' | cut -f2 -d"."`
NETWORK3=`ifconfig | grep inet | head -n1 | cut -d":" -f2 | awk '{print $2}' | cut -f3 -d"."`
NETMASK0=`ifconfig | grep inet | head -n1 | cut -d":" -f2 | awk '{print $4}'`
BROADCAST0=`ifconfig | grep inet | head -n1 | cut -d":" -f2 | awk '{print $6}'`
GATEWAY4=`route -n | grep UG | awk '{print $2}' | cut -f4 -d"."`
if [ "$GATEWAY4" = "1" ]; then
	NETWORK4="2"
elif [ "$GATEWAY4" = "254" ]; then
	NETWORK4="253"
else
	NETWORK4="1"
fi
GATEWAY0=`route -n | grep UG | awk '{print $2}'`



if [ "$NETNAME0" != "" ]; then
	NETCONF="OK"
elif [ "$NETNAME1" != "" ]; then
	NETCONF="OK"
elif [ "$NETNAME2" != "" ]; then
	NETCONF="OK"
else
	NETCONF="failed"
fi
if [ "$NETCONF" = "OK" ]; then

	mv /TARGET/etc/network/interfaces /TARGET/etc/network/interfaces.original

#cat > /TARGET/tmp/step4 << FOO
##!/bin/bash
#apt-get purge network-manager -y
#apt-get autoremove -y
#FOO

cat > /TARGET/etc/network/interfaces << FOO
## Interface bonding
# Static IP address
auto bond0
iface bond0 inet static inet6 dhcp
	slaves $INETDEV
	bond-mode balance-rr
	bond-miimon 100
	bond_downdelay 200
	bond_updelay 200

	address $NETWORK1.$NETWORK2.$NETWORK3.$NETWORK4/24
	netmask $NETMASK0
	network $NETWORK1.$NETWORK2.$NETWORK3.0
	broadcast $BROADCAST0
	gateway $GATEWAY0
FOO

	#chmod +x /TARGET/tmp/step4
	#chroot /TARGET /tmp/step4
	#rm -f /TARGET/tmp/step4

	echo "STEP4=networking & bonding auto set up" >> /var/log/sparkylinux-installer.log
	cat /TARGET/etc/network/interfaces >> /var/log/sparkylinux-installer.log

	# check or change network settings
	$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL112" $HEIGHT $WIDTH
	if [ "$?" = "0" ]; then
		nano /TARGET/etc/network/interfaces
		echo "STEP4=networking & bonding manually fixed" >> /var/log/sparkylinux-installer.log
		cat /TARGET/etc/network/interfaces >> /var/log/sparkylinux-installer.log
	fi

else

	echo "STEP4=networking & bonding autoconfiguration failed so editing interfaces manually" >> /var/log/sparkylinux-installer.log

	# no eth devices found, set interfaces manually
	$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL113 $LOCAL117" $HEIGHT $WIDTH
	if [ "$?" = "0" ]; then
		nano /TARGET/etc/network/interfaces
	fi

	cat /TARGET/etc/network/interfaces >> /var/log/sparkylinux-installer.log

fi

# Backup and edit sysctl to enable ipv4 fowarding
cp /TARGET/etc/sysctl.conf /TARGET/etc/sysctl.conf.original

# Uncomment both line to enable packet forwarding for IPv4 and IPv6
sed -i -e 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /TARGET/etc/sysctl.conf
sed -i -e 's/#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/g' /TARGET/etc/sysctl.conf

cat > /TARGET/tmp/step4 << FOO
#!/bin/bash
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv6.conf.all.forwarding=1
chattr +i /etc/sysctl.conf
FOO

chmod +x /TARGET/tmp/step4
chroot /TARGET /tmp/step4
rm -f /TARGET/tmp/step4

### end of step 4 ###

### step 5: Pre samba configuration, backup and changes hosts file ###

# Include fixed ip with complete machine name high letters and remove any DNS entry
#MYHOSTNAME=$(hostname)
MYHOSTNAME=`cat /TARGET/etc/hostname`
MYDNAME0=$(domainname)
if [ "$MYDNAME0" = "(none)" ]; then
	$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL119\n$LOCAL120" $HEIGHT $WIDTH 2>/tmp/mydname.$$
	MYDNAME1=`cat /tmp/mydname.$$`
	if [ "$MYDNAME1" != "" ]; then
		MYDOMAINNAME="$MYDNAME1"
	else
		MYDOMAINNAME="sparky.intranet"
	fi
else
        MYDOMAINNAME="sparky.intranet"
fi
DOMAIN=`cat /tmp/mydname.$$ | cut -d"." -f1`
#TLD=`cat /tmp/mydname.$$ | cut -d"." -f2`
MYFQDN=$MYHOSTNAME.$MYDOMAINNAME
rm -f /tmp/mydname.$$

# Lookup the current loopback IP Address and strip it out of the result
LOADDR4=$(/sbin/ifconfig lo | grep 'inet '| cut -d: -f2 | awk '{ print $2}')
LOADDR6=$(/sbin/ifconfig lo | grep 'inet6 ' | awk '{ print $2}')

# Lookup the current IP Address and strip it out of the result
IPADDR4=$(/sbin/ifconfig | grep 'inet '| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $2}')
IPADDR6=$(/sbin/ifconfig | grep 'inet6 '| grep -v '::1' | awk '{ print $2}')

# backup /etc/hosts and create a new one
if [ -f /TARGET/etc/hosts ]; then
	cp /TARGET/etc/hosts /TARGET/etc/hosts.original
fi
touch /TARGET/etc/hosts

#  Add the loopback IP Address
echo "$LOADDR4 localhost localhost.localdomain" >> /TARGET/etc/hosts
echo "$LOADDR6 localhost localhost.localdomain ip6-localhost ip6-loopback" >> /TARGET/etc/hosts
echo " " >> /TARGET/etc/hosts
echo "ff02::1 ip6-allnodes" >> /TARGET/etc/hosts
echo "ff02::2 ip6-allrouters" >> /TARGET/etc/hosts
echo " " >> /TARGET/etc/hosts

#  Add the server's current IP Address and HostName to /etc/hosts
echo "$IPADDR4 $MYHOSTNAME $MYFQDN ${MYHOSTNAME^^} ${MYHOSTNAME^^}.$MYDOMAINNAME" >> /TARGET/etc/hosts
echo "$IPADDR6 $MYHOSTNAME $MYFQDN ${MYHOSTNAME^^} ${MYHOSTNAME^^}.$MYDOMAINNAME" >> /TARGET/etc/hosts

# Change the way resolvconf works and lock the file
mv /TARGET/etc/resolv.conf /TARGET/etc/resolv.conf.original
touch /TARGET/etc/resolv.conf
echo "domain $MYFQDN" >> /TARGET/etc/resolv.conf
echo "search $MYFQDN" >> /TARGET/etc/resolv.conf
echo "nameserver 127.0.0.1" >> /TARGET/etc/resolv.conf
echo "nameserver ::1" >> /TARGET/etc/resolv.conf
echo "nameserver $IPADDR4" >> /TARGET/etc/resolv.conf
echo "nameserver $IPADDR6" >> /TARGET/etc/resolv.conf

cat > /TARGET/tmp/step5 << FOO
#!/bin/bash
domainname $MYDOMAINNAME
chattr +i /etc/hosts
chattr +i /etc/resolv.conf
FOO

chmod +x /TARGET/tmp/step5
chroot /TARGET /tmp/step5
rm -f /TARGET/tmp/step5

echo "STEP5:" >> /var/log/sparkylinux-installer.log
echo "MYDOMAINNAME=$MYDOMAINNAME" >> /var/log/sparkylinux-installer.log
echo "MYFQDN=$MYHOSTNAME.$MYDOMAINNAME" >> /var/log/sparkylinux-installer.log
echo "ETC-HOSTS:" >> /var/log/sparkylinux-installer.log
cat /TARGET/etc/hosts >> /var/log/sparkylinux-installer.log
echo "ETC-RESOLV.CONF:" >> /var/log/sparkylinux-installer.log
cat /TARGET/etc/resolv.conf >> /var/log/sparkylinux-installer.log

### end of step 5 ###

### step 6: samba ###

## Stop all samba related services
systemctl stop smbd
systemctl stop nmbd
systemctl stop winbind
systemctl stop samba
systemctl stop samba-ad-dc
systemctl disable smbd.service
systemctl disable nmbd.service
systemctl disable winbind.service
systemctl disable samba.service

# Backup actual Samba config file
if [ -f /TARGET/etc/samba/smb.conf ]; then
	cp /TARGET/etc/samba/smb.conf /TARGET/etc/samba/smb.conf.original
fi

# Backup actual samba install
for f in /TARGET/var/run/samba/*.tdb; do mv "$f" "$(echo "$f" | sed s/tdb/TDBoriginal/)"; done
for f in /TARGET/var/run/samba/*.ldb; do mv "$f" "$(echo "$f" | sed s/ldb/LDBoriginal/)"; done
for f in /TARGET/var/lib/samba/*.tdb; do mv "$f" "$(echo "$f" | sed s/tdb/TDBoriginal/)"; done
for f in /TARGET/var/lib/samba/*.ldb; do mv "$f" "$(echo "$f" | sed s/ldb/LDBoriginal/)"; done
for f in /TARGET/var/cache/samba*.tdb; do mv "$f" "$(echo "$f" | sed s/tdb/TDBoriginal/)"; done
for f in /TARGET/var/cache/samba*.ldb; do mv "$f" "$(echo "$f" | sed s/ldb/LDBoriginal/)"; done
for f in /TARGET/var/lib/samba/private*.tdb; do mv "$f" "$(echo "$f" | sed s/tdb/TDBoriginal/)"; done
for f in /TARGET/var/lib/samba/private*.ldb; do mv "$f" "$(echo "$f" | sed s/ldb/LDBoriginal/)"; done
for f in /TARGET/var/run/samba/*.tdb; do mv "$f" "$(echo "$f" | sed s/tdb/TDBoriginal/)"; done
for f in /TARGET/var/run/samba/*.ldb; do mv "$f" "$(echo "$f" | sed s/ldb/LDBoriginal/)"; done

# Backup Kerberos file
if [ -f /TARGET/etc/krb5.conf ]; then
	mv /TARGET/etc/krb5.conf /TARGET/etc/krb5.conf.original
	chattr +i /TARGET/etc/krb5.conf.original
fi

# TO RESET EVERYTHING! Make this step now (implementantion) and in case of problems to RESET AND START OVER FROM 0
rm -rfv /TARGET/var/run/samba/*.tdb *.ldb
rm -rfv /TARGET/var/lib/samba/*.tdb *.ldb
rm -rfv /TARGET/var/cache/samba/*.tdb *.ldb
rm -rfv /TARGET/var/lib/samba/private/*.tdb *.ldb
cp /TARGET/var/lib/samba/private/krb5.conf /TARGET/var/lib/samba/private/krb5.conf.original
rm -fv /TARGET/var/lib/samba/private/krb5.conf
rm -fv /TARGET/etc/samba/smb.conf

BROADCAST1=$($NETWORK1.$NETWORK2.$NETWORK3.255)
echo "STEP6:" >> /var/log/sparkylinux-installer.log
echo "BROADCAST1=$($NETWORK1.$NETWORK2.$NETWORK3.255)" >> /var/log/sparkylinux-installer.log

# set samba password
SMBPASS="1"
SMBPASS2="2"

while [ "$SMBPASS" != "$SMBPASS2" ]; do
	$DIALOG $TITLE"$TITLETEXT" $PASSWORD "$LOCAL121" $HEIGHT $WIDTH 2>/tmp/smbpass.$$
	if [ "$?" = "0" ]; then
		SMBPASS=`cat /tmp/smbpass.$$`
	else
		exit 1
	fi

	rm /tmp/smbpass.$$

	$DIALOG $TITLE"$TITLETEXT" $PASSWORD "$LOCAL122" $HEIGHT $WIDTH 2>/tmp/smbpass.$$
	if [ "$?" = "0" ]; then
		SMBPASS2=`cat /tmp/smbpass.$$`
	else
		exit 1
	fi

	rm /tmp/smbpass.$$

	if [ "$SMBPASS" != "$SMBPASS2" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL123" $HEIGHT $WIDTH
	fi

done
rm /tmp/smbpass.$$

# set site name
$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL126\n$LOCAL127" $HEIGHT $WIDTH 2>/tmp/sitechoice.$$
MYSITE=`cat /tmp/sitechoice.$$`
if [ "$MYSITE" != "" ]; then
	MYSITENAME="$MYSITE"
else
	MYSITENAME="Earth"
fi
rm -f /tmp/sitechoice.$$
echo "MYSITENAME=$MYSITENAME" >> /var/log/sparkylinux-installer.log

# set dns
$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL124\n$LOCAL125" $HEIGHT $WIDTH 2>/tmp/dnschoice.$$
MYDNS=`cat /tmp/dnschoice.$$`
if [ "$MYDNS" != "" ]; then
	MYDNS="$MYDNS"
else
	MYDNS="8.8.8.8"
fi
rm -f /tmp/dnschoice.$$
echo "MYDNS=$MYDNS" >> /var/log/sparkylinux-installer.log

# samba root user name
TARGERUSER=`cat /var/log/sparkylinux-installer.log | grep TARGETUSER | grep -v TARGETUSERGROUPS | cut -d"=" -f2`
while [ "$ROOTSMB" = "$TARGETUSER" ]; do
	$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL130" $HEIGHT $WIDTH 2>/tmp/smbroot.$$
	ROOTSMB=`cat /tmp/smbroot.$$`
	if [ "$ROOTSMB" = "" ]; then
		SMBROOT="sparkysmb"
	else
		SMBROOT="$ROOTSMB"
	fi
	rm -f /tmp/smbroot.$$

	if [ "$ROOTSMB" = "$TARGETUSER" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL131" $HEIGHT $WIDTH
	fi
done
rm -f /tmp/smbroot.$$

cat > /TARGET/tmp/step6 << FOO
# Create log folder and user home base directory
echo "Creating /home/log/samba and /home/UserHomes directories..."
mkdir -p /TARGET/home/log/samba
mkdir -p /TARGET/home/$SMBROOT

#!/bin/bash
# Do the provision
samba-tool domain provision --realm=$MYDOMAINNAME --domain=$DOMAIN^^ --site=$MYSITENAME --dns-backend=SAMBA_INTERNAL --adminpass=$SMBPASS --server-role=dc --function-level=2008_R2 --use-rfc2307 --use-xattr=yes --option="dns forwarder=$MYDNS" --option="winbind nss info=rfc2307" --option="winbind use default domain=Yes" --option="winbind refresh tickets=yes" --option="log level=1" --option="log file = /home/log/samba/%m.log" --option="max log size=100000" --option="access based share enum=Yes" --option="template homedir=/home/UserHomes/%U" --option="template shell=/bin/bash" --option="map acl inherit=yes" --option="acl group control=yes" --option="store dos attributes=Yes" --option="vfs objects=acl_xattr" --option="wins support=yes" --option="wins proxy=no" --option="dns proxy=no" --option="max wins ttl=518400"

#Linking samba generated kerberos file to systemwide
ln -sf /var/lib/samba/private/krb5.conf /etc/krb5.conf
chattr +i /etc/krb5.conf

# Link libnss and reload
ln -s /lib/x86_64-linux-gnu/libnss_winbind.so.2 /lib/x86_64-linux-gnu/libnss_winbind.so
ldconfig

# Enable AD users to logon
echo "session required pam_mkhomedir.so skel=/etc/skel/ umask=0022" | tee -a /etc/pam.d/common-session
# Enable AD Users and Groups avaliable locally
sed -i '27 c\password        [success=2 default=ignore]      pam_winbind.so try_first_pass' /etc/pam.d/common-account

# Add domain admins to sudo
echo "%domain\ admins@$MYDOMAINNAME ALL=(ALL:ALL) ALL" | tee -a /etc/sudoers
echo "Set group_source dynamic" >> /etc/sudo.conf

# Ajust ntp_signd
cp /etc/ntp.conf /etc/ntp.conf.original
chattr +i /etc/ntp.conf.orignal
chgrp ntp /var/lib/samba/ntp_signd
chown root:ntp /var/lib/samba/ntp_signd/
chmod 750 /var/lib/samba/ntp_signd/
chattr -i /etc/ntp.conf

CHECKNTP=`cat /tmp/ntpconf | grep br`
if [ "$CHECKNTP" != "" ]; then
#sed -i '20 c\pool gps.ntp.br iburst' /etc/ntp.conf
#sed -i '21 c\pool a.ntp.br iburst' /etc/ntp.conf
#sed -i '22 c\pool b.ntp.br iburst' /etc/ntp.conf
#sed -i '23 c\pool c.ntp.briburst' /etc/ntp.conf
sed -i -e 's/0.debian.pool.ntp.org/gps.ntp.br/g' /etc/ntp.conf
sed -i -e 's/1.debian.pool.ntp.org/a.ntp.br/g' /etc/ntp.conf
sed -i -e 's/2.debian.pool.ntp.org/b.ntp.br/g' /etc/ntp.conf
sed -i -e 's/3.debian.pool.ntp.org/c.ntp.br/g' /etc/ntp.conf
fi
#sed -i '35 c\restrict -4 default kod notrap nomodify nopeer noquery mssntp' /etc/ntp.conf
#sed -i '36 c\restrict -6 default kod notrap nomodify nopeer noquery mssntp' /etc/ntp.conf
sed -i -e 's/noquery limited/noquery mssntp/g' /etc/ntp.conf
sed -i -e 's/noquery limited/noquery mssntp/g' /etc/ntp.conf
#sed -i '52 c\broadcast $BROADCAST1' /etc/ntp.conf
sed -i -e 's/#broadcast /broadcast /g' /etc/ntp.conf
sed -i -e 's/broadcast [0-9]*.[0-9]*.[0-9]*.[0-9]*/broadcast $BROADCAST1/g' /etc/ntp.conf
echo "ntpsigndsocket /var/lib/samba/ntp_signd" >> /etc/ntp.conf
echo "listen on $IPADDR4" >> /etc/ntp.conf
echo "listen on $IPADDR6" >> /etc/ntp.conf
chattr +i /etc/ntp.conf
systemctl daemon-reload
service ntp start

# Enable and start samba ad dc service
systemctl unmask samba-ad-dc.service
systemctl start samba-ad-dc.service
systemctl enable samba-ad-dc.service

FOO

chmod +x /TARGET/tmp/step6
chroot /TARGET /tmp/step6
rm -f /TARGET/tmp/step6

mv /TARGET/etc/nsswitch.conf /TARGET/etc/nsswitch.conf.original
cat > /TARGET/etc/nsswitch.conf << FOO
# /etc/nsswitch.conf
#
# Example configuration of GNU Name Service Switch functionality.
# If you have the `glibc-doc-reference' and `info' packages installed, try:
# `info libc "Name Service Switch"' for information about this file.

passwd:         compat winbind
group:          compat winbind
shadow:         compat
gshadow:        files

hosts:  files wins mdns4_minimal dns [NOTFOUND=return]
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis
FOO

# configure samba config
UPMYHOSTNAME=`echo $MYHOSTNAME | tr [a-z] [A-Z]`
UPMYFQDN=`echo $MYHOSTNAME.$MYDOMAINNAME | tr [a-z] [A-Z]`
UPDOMAIN=`echo $DOMAIN | tr [a-z] [A-Z]`
cat > /TARGET/etc/samba/smb.conf << FOO
# Global parameters
[global]
        netbios name = $UPMYHOSTNAME
        realm = $UPMYFQDN
        workgroup = $UPDOMAIN
        dns forwarder = $MYDNS
        log file = /home/log/samba/%m.log
        log level = 1
        max log size = 100000
        server role = active directory domain controller
        template homedir = /home/$SMBROOT/%U
        template shell = /bin/bash
        winbind nss info = rfc2307
        winbind use default domain = Yes
        idmap_ldb:use rfc2307 = yes
        store dos attributes = Yes
        map acl inherit = Yes
        access based share enum = Yes
        acl group control = Yes
        vfs objects = acl_xattr

[netlogon]
        path = /var/lib/samba/sysvol/$MYDOMAINNAME/scripts
        read only = No
        browseable = No

[sysvol]
        path = /var/lib/samba/sysvol
        read only = No
        browseable = No

[homes]
        path = /home/$SMBROOT/%U
        read only - No
        writeable = Yes
        browsable = No

FOO

# shared folder
$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL128" $HEIGHT $WIDTH 
if [ "$?" = "0" ]; then
	$DIALOG $BACKTITLE"$LOCAL129" $TITLE"$TITLETEXT" $DSELECT / $HEIGHT2 $WIDTH2 2>/tmp/sharedir.$$
	DIRSELECT=`cat /tmp/sharedir.$$`
	$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL135" $HEIGHT2 $WIDTH2 2>/tmp/namedir.$$
	DIRNAME=`cat /tmp/namedir.$$`
	if [ "$DIRNAME" != "" ]; then
		DIRNAME=$DIRNAME
	else
		DIRNAME="sparkydir.$$"
	fi
	if [ "$DIRSELECT" = "$SMBROOT" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL132" $HEIGHT $WIDTH
		echo "share yes" >> /tmp/dirshare.$$
	elif [ "$DIRSELECT" = "" ]; then
		$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL133" $HEIGHT $WIDTH
		echo "share yes" >> /tmp/dirshare.$$
	elif [ "$DIRSELECT" != "" ]; then

cat > /TARGET/tmp/step6a << FOO
#!/bin/bash
if [ ! -d "$DIRSELECT" ]; then
mkdir -p $DIRSELECT
fi
echo "[$DIRNAME]" >> /etc/samba/smb.conf
echo "	path = $DIRSELECT" >> /etc/samba/smb.conf
echo "	read only = No" >> /etc/samba/smb.conf
echo "" >> /etc/samba/smb.conf
# lock config file
chattr +i /etc/samba/smb.conf
FOO
		chmod +x /TARGET/tmp/step6a
		chroot /TARGET /tmp/step6a
		rm -f /TARGET/tmp/step6a
		rm -f /tmp/namedir.$$
		echo "share yes" >> /tmp/dirshare.$$
	fi
	echo "SHARED DIRA=$DIRSELECT" >> /var/log/sparkylinux-installer.log
	echo "SHARED NAMEA=$DIRNAME" >> /var/log/sparkylinux-installer.log
else
	echo "" >> /tmp/dirshare.$$
	echo "SHARED DIRA=" >> /var/log/sparkylinux-installer.log
	echo "SHARED NAMEA=" >> /var/log/sparkylinux-installer.log
fi

# more shared folders
CHECKSHARE0=`cat /tmp/dirshare.$$ | grep yes`
rm -f /tmp/dirshare.$$
if [ "$CHECKSHARE0" != "" ]; then
	while [ "$CHECKSHARE" != "" ]; do
		$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL134" $HEIGHT $WIDTH
		if [ "$?" = "0" ]; then
			$DIALOG $BACKTITLE"$LOCAL129" $TITLE"$TITLETEXT" $DSELECT / $HEIGHT2 $WIDTH2 2>/tmp/sharedir.$$
			DIRSELECT=`cat /tmp/sharedir.$$`
			$DIALOG $TITLE"$TITLETEXT" $ENTRY "$LOCAL135" $HEIGHT2 $WIDTH2 2>/tmp/namedir.$$
			DIRNAME=`cat /tmp/namedir.$$`
			if [ "$DIRSELECT" = "$SMBROOT" ]; then
				$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL132" $HEIGHT $WIDTH
				echo "share yes" >> /tmp/dirshare.$$
			elif [ "$DIRSELECT" = "" ]; then
				$DIALOG $TITLE"$TITLETEXT" $MSGBOX "$LOCAL133" $HEIGHT $WIDTH
				echo "share yes" >> /tmp/dirshare.$$
			elif [ "$DIRSELECT" != "" ]; then

cat > /TARGET/tmp/step6b << FOO
#!/bin/bash
if [ ! -d "$DIRSELECT" ]; then
mkdir -p $DIRSELECT
fi
chown root:"Domain Admins" $DIRSELECT
chmod 2775 $DIRSELECT
# unlock config file
chattr -i /etc/samba/smb.conf
echo "[$DIRNAME]" >> /etc/samba/smb.conf
echo "	path = $DIRSELECT" >> /etc/samba/smb.conf
echo "	read only = No" >> /etc/samba/smb.conf
echo "" >> /etc/samba/smb.conf
# lock config file
chattr +i /etc/samba/smb.conf
FOO
				chmod +x /TARGET/tmp/step6b
				chroot /TARGET /tmp/step6b
				rm -f /TARGET/tmp/step6b
				rm -f /tmp/namedir.$$
				echo "share yes" >> /tmp/dirshare.$$
			fi
			echo "SHARED DIRB=$DIRSELECT" >> /var/log/sparkylinux-installer.log
			echo "SHARED NAMEB=$DIRNAME" >> /var/log/sparkylinux-installer.log
		else
			echo "" >> /tmp/dirshare.$$
			echo "SHARED DIRB=" >> /var/log/sparkylinux-installer.log
			echo "SHARED NAMEB=" >> /var/log/sparkylinux-installer.log
		fi
		CHECKSHARE=`cat /tmp/dirshare.$$`
		rm /tmp/dirshare.$$
	done
	rm /tmp/dirshare.$$
fi
smbcontrol all reload-config

# Important step to grant network file service
cat > /TARGET/tmp/step6c << FOO
#!/bin/bash
net rpc rights grant "$UPDOMAIN\domain admins" SeDiskOperatorPrivilege -U "$UPDOMAIN\administrator"

## Verify all services
netstat ‚Äìtulpn| egrep "smbd|samba"

## Verify domain version
samba-tool domain level show

mkdir -p /srv/samba/data/
chown root:"Domain Admins" /srv/samba/data/ 
chmod 0770 /srv/samba/data/

#postconf -e "myorigin = $MYDOMAINNAME"
#postconf -e "myhostname=$MYFQDN"
FOO

chmod +x /TARGET/tmp/step6c
chroot /TARGET /tmp/step6c
rm -f /TARGET/tmp/step6c

echo "STEP6=finished..." >> /var/log/sparkylinux-installer.log

### end of step 6 ###

### step 7: clamav ###

## install clamav, if desired ##
# question the install nedded
$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL137" $HEIGHT $WIDTH
if [ "$?" = "0" ]; then

cat > /TARGET/tmp/step7 << FOO
#!/bin/bash
apt-get install clamav clamav-freshclam clamav-milter libc-icap-mod-clamav python-pyclamav libclamav-client-perl whois logwatch libc-icap-mod-clamav python-pyclamav libclamav-client-perl -y
killall freshclam
freshclam

FOO

chmod +x /TARGET/tmp/step7
chroot /TARGET /tmp/step7
rm -f /TARGET/tmp/step7

echo "STEP7=ClamAv installed" >> /var/log/sparkylinux-installer.log

else

echo "STEP7=ClamAv not installed" >> /var/log/sparkylinux-installer.log

fi

### end of step 7 ###

### step 8: netdata ###

## install netdata, if desired ##
# question the install nedded
$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL138" $HEIGHT $WIDTH
if [ "$?" = "0" ]; then

cat > /TARGET/tmp/step8 << FOO
#!/bin/bash
apt-get install fonts-font-awesome fping freeipmi-common libfreeipmi17 libipmimonitoring6 libjs-bootstrap netdata netdata-data -y
FOO

chmod +x /TARGET/tmp/step8
chroot /TARGET /tmp/step8
rm -f /TARGET/tmp/step8

echo "STEP8=netdata monitoring installed" >> /var/log/sparkylinux-installer.log

else

echo "STEP8=netdata monitoring not installed" >> /var/log/sparkylinux-installer.log

fi

### end of step 8 ###

### step 9: webmin ###

## install webmin, if desired ##
# question the install nedded
$DIALOG $TITLE"$TITLETEXT" $YESNO "$LOCAL138" $HEIGHT $WIDTH
if [ "$?" = "0" ]; then

cat > /TARGET/tmp/step9 << FOO
#!/bin/bash
apt-get install strongswan-starter webmin -y
FOO

chmod +x /TARGET/tmp/step9
chroot /TARGET /tmp/step9
rm -f /TARGET/tmp/step9

echo "STEP9=WebMin manager installed" >> /var/log/sparkylinux-installer.log

else

echo "STEP9=WebMin manager not installed" >> /var/log/sparkylinux-installer.log

fi

### end of step 9 ###

echo "==============================================================" >> /var/log/sparkylinux-installer.log
